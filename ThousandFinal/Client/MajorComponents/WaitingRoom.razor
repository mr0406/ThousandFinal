<div id="loginContainer">

    <div id="roomCreator">
        <label>
            <p>Room:</p>
            <input @bind="newRoomName" @onkeyup="@AddRoomPressKey" placeholder="Room Name"/>
            <button @onclick="@AddRoom"><span>Add</span><img class="not_hover" src="https://img.icons8.com/material-rounded/24/000000/add-column.png"/><img class="hover" src="https://img.icons8.com/material-outlined/24/000000/add-column.png"/></button>
        </label>
    </div>

        @if (choosenRoom != null)
        {
            <div class="chooseNickname">
                <header>
                    <div class="left">
                        <span>thousand</span>final
                    </div>
                    <button @onclick="CloseJoinWindow">
                        x
                    </button>
                </header>
                <div class="nicknameFormContainer">
                    <span>Enter your nickname</span>
                    <input @bind="userName" @onkeyup="@JoinPressKey" placeholder="Nickname" />
                </div>
                <button @onclick="TryJoin"><span>Join</span><img class="not_hover" src="https://img.icons8.com/ios-filled/50/000000/enter-2.png"/><img class="hover" src="https://img.icons8.com/ios/50/000000/enter-2.png"/></button>
            </div>
        }

        <div class="gameInfo">
            <div>
                This is a game called: Russian Schnapsed or Thousand Schnapsen.
                You can read more on: <a href="https://en.wikipedia.org/wiki/Russian_Schnapsen" target="_blank">Game Info</a>
            </div>
        </div>

        <div class="aboutUs">
            <div>Created by polish IT students: </div>
            <div><span>Marcin Rakowski</span> - founder, backend (<a href="https://github.com/mr0406" target="_blank">github</a>) </div>
            <div><span>Agata Wojciechowska</span> - frontend (<a href="https://github.com/AgataWojciech" target="_blank">github</a>) </div>
            <div><span>Michał Kelman</span> - frontend (<a href="https://github.com/fonvi" target="_blank">github</a>) </div>
            <br/>
            <div>Used technologies: .NET Core, C#, Blazor WebAssembly, SignalR, HTML5, CSS3</div>
            <div>Icons from <a href="https://icons8.com/icons">icons8</a></div>
        </div>

        <div id="roomBrowser">
            @for (int i = 0; i < roomDTOs.Count(); i++)
            {
                int temp = i;
                <div class="singleRoomContainer">
                    <div class="roomName"> @roomDTOs[i].Name </div>
                    <div class="numOfUsers"> @roomDTOs[i].NumOfUsers/3 </div>
                    <button @onclick="@(() => (ChooseRoom(temp)))">Choose</button>
                </div>
            }
        </div>
</div>

@code {
    [CascadingParameter] HubConnection hubConnection { get; set; }

    public string userName;
    public string errorType;

    public List<RoomDTO> roomDTOs = new List<RoomDTO>();

    public string newRoomName { get; set; }
    public RoomDTO choosenRoom { get; set; }

    private const int MAX_NUM_OF_ROOMS = 20;
    private const int MAX_NUM_OF_USERS_IN_ROOM = 3;

    private const int MAX_ROOM_NAME_LENGTH = 16;
    private const int MAX_NICK_LENGTH = 16;

    protected override async Task OnInitializedAsync()
    {
        hubConnection.On(ServerToClient.RECEIVE_ROOMS, (List<RoomDTO> roomDTOs) =>
        {
            this.roomDTOs = roomDTOs;
            StateHasChanged();
        });

        await hubConnection.SendAsync(ClientToServer.GET_ROOMS);
    }

    async Task CloseJoinWindow()
    {
        choosenRoom = null;
    }

    async Task TryJoin()
    {
        userName = userName.Trim();

        if(String.IsNullOrWhiteSpace(userName))
        {
            //empty nick
            return;
        }

        if(userName.Length > MAX_NICK_LENGTH)
        {
            //too long nick
            return;
        }

        if (choosenRoom.NumOfUsers >= MAX_NUM_OF_USERS_IN_ROOM)
        {
            //no place in room
            return;
        }

        await hubConnection.SendAsync(ClientToServer.JOIN_ROOM, userName, choosenRoom.Name);
    }

    async Task AddRoom()
    {
        if(roomDTOs.Count() >= MAX_NUM_OF_ROOMS)
        {
            //too many rooms
            return;
        }

        newRoomName = newRoomName.Trim();

        if(String.IsNullOrWhiteSpace(newRoomName))
        {
            //empty room name
            return;
        }

        if(newRoomName.Length > MAX_ROOM_NAME_LENGTH)
        {
            //to long room name
            return;
        }


        if (roomDTOs.Any(x => x.Name == newRoomName))
        {
            //There is already room with this name
            return;
        }

        await hubConnection.SendAsync(ClientToServer.CREATE_ROOM, newRoomName);
        newRoomName = "";
    }

    async Task JoinPressKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await TryJoin();
    }

    async Task AddRoomPressKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await AddRoom();
    }

    async Task ChooseRoom(int roomNumber)
    {
        choosenRoom = roomDTOs[roomNumber];
    }
}
