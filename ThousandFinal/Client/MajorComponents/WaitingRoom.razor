<div id="loginContainer">

    <div id="roomCreator">
        <label>
            Room:
            <input @bind="newRoomName" @onkeyup="@AddRoomPressKey" placeholder="Room Name"/>
            <button @onclick="@AddRoom">Add</button>
        </label>
    </div>

        @if (choosenRoom != null)
        {
            <div class="chooseNickname">
                <header class="nicknameHeader">

                    <div class="left">
                        <span>thousand</span>final
                    </div>

                    <div class="right">

                        <a href="" class="nicknameCloseButton">
                            x
                        </a>

                    </div>
                </header>

                <div class="nicknameFormContainer">
                    <div class="nicknamePrompt">Enter your nickname</div>
                    <input class="nicknameInput" @bind="userName" @onkeyup="@JoinPressKey" placeholder="Nickname" />
                </div>

                <footer class="nicknameFooter">

                    <div class="right">
                        <a href="" class="joinButton" @onclick="TryJoin">Join</a>
                    </div>

                </footer>
            </div>
        }
        <div class="aboutUs">

            <span> Tu będzie info o nas </span>

        </div>

        <div class="gameInfo">

            <span> Tu będzie info o grze </span>

        </div>

        <div id="roomBrowser">
            @for (int i = 0; i < roomDTOs.Count(); i++)
            {
                int temp = i;
                <div class="singleRoomContainer">

                    <div class="roomName"> @roomDTOs[i].Name </div>
                    <div class="numOfUsers"> @roomDTOs[i].NumOfUsers/3 </div>
                    <button @onclick="@(() => (ChooseRoom(temp)))">Choose</button>

                </div>
            }
        </div>
   
</div>

@code {
    [CascadingParameter] HubConnection hubConnection { get; set; }

    public string userName;
    public string errorType;

    public List<RoomDTO> roomDTOs = new List<RoomDTO>();

    public string newRoomName { get; set; }
    public RoomDTO choosenRoom { get; set; }

    private const int MAX_NUM_OF_ROOMS = 20;
    private const int MAX_NUM_OF_USERS_IN_ROOM = 3;

    protected override async Task OnInitializedAsync()
    {
        hubConnection.On(ServerToClient.RECEIVE_GET_ROOMS, (List<RoomDTO> roomDTOs) =>
        {
            this.roomDTOs = roomDTOs;
            StateHasChanged();
        });

        await hubConnection.SendAsync(ClientToServer.GET_ROOMS);
    }

    async Task TryJoin()
    {
        if (!String.IsNullOrWhiteSpace(userName) && choosenRoom.NumOfUsers < MAX_NUM_OF_USERS_IN_ROOM)
        {
            await hubConnection.SendAsync(ClientToServer.JOIN_ROOM, userName, choosenRoom.Name);
        }
    }

    async Task AddRoom()
    {
        if(roomDTOs.Count() >= MAX_NUM_OF_ROOMS)
        {
            //too many rooms
            return;
        }

        if (roomDTOs.Any(x => x.Name == newRoomName))
        {
            //There is already room with this name
            return;
        }

        await hubConnection.SendAsync(ClientToServer.CREATE_ROOM, newRoomName);
        newRoomName = "";
    }

    async Task JoinPressKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await TryJoin();
    }

    async Task AddRoomPressKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await AddRoom();
    }

    async Task ChooseRoom(int roomNumber)
    {
        choosenRoom = roomDTOs[roomNumber];
    }

}
