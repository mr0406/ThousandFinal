<div id="chatContainer">
    <div id="players">
        <h1>Users: </h1>

        <ul class="playerList">
            @foreach (var user in Users)
            {
                <li class="playerList">@user.Name: @user.Points</li>
            }
        </ul>
    </div>

    <div id="messages">
        <! –– class="overflow-auto" ––>
        <h1>Messages: </h1>
        @foreach (var message in messages)
        {
            if (message.GeneratedFromServer)
            {
                <div class="message" id="serverMessage">@message.Text</div>
            }
            else if (message.AuthorName == UserName)
            {

                <div class="message" id="myMessage">@message.Text</div>
            }
            else
            {
                <div class="message" id="othersMessage">@message.AuthorName: @message.Text</div>
            }
        }
    </div>

    <div id="form">
        <!-- class="form-group" -->
        <label>
            <p>Message:</p>
            <input @bind="messageInput" id="messageForm" @onkeyup="@KeyPress" />
        </label>
        <button @onclick="Send"><span>Send</span><img src="https://img.icons8.com/dotty/80/000000/filled-sent.png"/></button>
    </div>

</div>

@code {
    [CascadingParameter] public HubConnection hubConnection { get; set; }

    [Parameter] public List<UserModel> Users { get; set; }
    [Parameter] public string UserName { get; set; }

    public List<MessageModel> messages = new List<MessageModel>();
    public string messageInput;

    public const int MAX_MESSAGE_LENGTH = 256;

    protected override async Task OnInitializedAsync()
    {
        hubConnection.On<MessageModel>(ServerToClient.RECEIVE_MESSAGE, (MessageModel message) =>
        {
            Console.WriteLine(message.Text);
            messages.Add(message);
            StateHasChanged();
        });
    }

    async Task Send()
    {
        if(String.IsNullOrWhiteSpace(messageInput))
        {
            //cant send empty message
            return;
        }

        if(messageInput.Length > MAX_MESSAGE_LENGTH)
        {
            //too long message
            return;
        }

        await hubConnection.SendAsync(ClientToServer.SEND_MESSAGE, new MessageModel(messageInput, UserName));
        messageInput = "";
    }

    async Task KeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await Send();
    }
}