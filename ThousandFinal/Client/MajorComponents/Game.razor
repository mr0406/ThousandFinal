<CascadingValue Value="this">
    <div id="gameContainer">

        <button id="leaveButton" @onclick="LeaveRoom">
            <span>Leave</span>
            <img class="not_hover" src="https://img.icons8.com/pastel-glyph/100/000000/exit--v1.png" />
            <img class="hover" src="https://img.icons8.com/pastel-glyph/64/000000/exit--v2.png" />
        </button>


        @if (!GameStarted)
        {<div id="readyContainer">
                <div id="readyScreen">
                    <h2>Are you ready? </h2>
                    <label id="switch">
                        <input type="checkbox" class="slider" @onchange="() => CheckBoxClick()" disabled="@checkBoxDisabled" />
                        <span class="slider"></span>
                    </label>
                    <button @onclick="TryStartGame" disabled="@IsStartGameButtonDisabled()">Start</button>
                </div>
            </div>
        }
        else
        {       
            <div class="activeBox">
                @if (AmIActive())
                {
                    <h1>I AM ACTIVE</h1>
                }
                else
                {
                    <h1>@Users[activePlayerIndex].Name is active</h1>
                }
            </div>

            <div id="tableContainer">

                @if (leftUserName != null)
                {
                    <div class="otherPlayer" id="leftPlayer">
                        <!-- <div id="leftUserName" class="playerNameContainer"> -->

                            <div class="playerName">@leftUserName</div>

                        <!-- </div> -->
                            
                                <OtherPlayerHand UserName="@leftUserName" numberOfCards="@leftUserNumberOfCards"></OtherPlayerHand>
                            
                    </div>
                }
                <div id="middleTableSection">

                    <div id="cardsToTake">
                        @if (cardsToTakeExists)
                        {
                            <CardsToTake Cards="@cardsToTake"></CardsToTake>
                        }
                    </div>

                    <MandatoryTable currentMandatory="@mandatorySuit"></MandatoryTable>

                    @if (phase == Phase.Auction)
                    {
                        if (AmIActive())
                        {
                            <div id="raisingPoints">
                                <AuctionBoard lastHighest="@highestBet"></AuctionBoard>
                            </div>
                        }
                    }

                    @if (phase == Phase.PlayerWon)
                    {
                        <h1 style="color: green">Winner: @getWinnerName()</h1>
                    }

                    @if (phase == Phase.RaisingPointsToAchieve)
                    {
                        if (AmIActive())
                        {
                            <div id="raisingPoints">
                                <RaisingPointsBoard playerBet="@highestBet"></RaisingPointsBoard>
                            </div>
                        }
                    }

                    @if (phase == Phase.Playing || phase == Phase.WaitingPhase)
                    {
                        <div id="table">
                            <CardsOnTable Cards="@cardsOnTable"></CardsOnTable>
                        </div>
                    }
                </div>

                @if (rightUserName != null)
                {
                    <div class="otherPlayer" id="rightPlayer">
                        <!-- <div id="rightUserName" class="playerNameContainer"> -->

                            <div class="playerName">@rightUserName</div>

                        <!-- </div> -->
                        <OtherPlayerHand UserName="@rightUserName" numberOfCards="@rightUserNumberOfCards"></OtherPlayerHand>
                    </div>
                }
            </div>

            <div id="playerCardsContainer">
                <div id="playerCards">
                    <PlayersHand Cards="@playerCards"></PlayersHand>
                </div>
            </div>
        }
    </div>
</CascadingValue>

@code {
    [CascadingParameter] public HubConnection hubConnection { get; set; }

    [Parameter] public List<UserModel> Users { get; set; }
    [Parameter] public string UserName { get; set; }

    public bool IsReady { get; set; }

    public string leftUserName;
    public int leftUserNumberOfCards;
    public string rightUserName;
    public int rightUserNumberOfCards;

    public List<CardModel> playerCards = new List<CardModel>();
    public List<CardModel> cardsOnTable = new List<CardModel>();
    public bool cardsToTakeExists { get; set; } = true;
    public List<CardModel> cardsToTake = new List<CardModel>(); //FIX

    public int activePlayerIndex;
    public Suit mandatorySuit;
    public bool GameStarted = false;
    public CardModel PayloadCard { get; set; }
    public bool checkBoxDisabled { get; set; } = false;
    public Phase phase { get; set; }
    public int highestBet { get; set; } = 100;
    public CardModel bestCardOnTable { get; set; } = null;

    public const int checkBoxDelayMiliSeconds = 2500;

    protected override async Task OnInitializedAsync()
    {
        hubConnection.On(ServerToClient.RECEIVE_GAME_DELETE, () =>
        {
            if(GameStarted)
            {
                IsReady = false;
                GameStarted = false;
            }
            StateHasChanged();
        });

        hubConnection.On(ServerToClient.RECEIVE_GAME_STARTED, () =>
        {
            GameStarted = true;
            StateHasChanged();
        });

        hubConnection.On<List<UserModel>>(ServerToClient.RECEIVE_USERS, (users) =>
        {
            Users = users;
            StateHasChanged();
        });

        hubConnection.On<RefreshPackage>(ServerToClient.RECEIVE_REFRESH, (package) =>
        {
            playerCards = package.playerSpecificInfo.playerCards;
            leftUserName = package.playerSpecificInfo.leftPlayerName;
            leftUserNumberOfCards = package.playerSpecificInfo.leftPlayerCardsNumber;
            rightUserName = package.playerSpecificInfo.rightPlayerName;
            rightUserNumberOfCards = package.playerSpecificInfo.rightPlayerCardsNumber;

            Users = package.gameInfo.players;
            activePlayerIndex = package.gameInfo.indexOfActivePlayer;
            mandatorySuit = package.gameInfo.currentMandatory;
            phase = package.gameInfo.phase;
            highestBet = package.gameInfo.highestBet;

            cardsOnTable = package.cardsInfo.cardsOnTable;
            bestCardOnTable = package.cardsInfo.bestCardOnTable;
            cardsToTakeExists = package.cardsInfo.cardsToTakeExists;
            cardsToTake = package.cardsInfo.cardsToTake;

            StateHasChanged();
        });
    }

    void TryStartGame()
    {
        Console.WriteLine("TryStartGame clicked");
        hubConnection.SendAsync(ClientToServer.TRY_START_GAME);
    }

    public bool IsStartGameButtonDisabled()
    {
        if(IsReady)
        {
            Console.WriteLine("StartButton ON");
            return false;
        }
        else
        {
            Console.WriteLine("StartButton OFF");
            return true;
        }
    }

    public async Task PlayCard()
    {
        if (PayloadCard.Status != Status.InHand)
        {
            Console.WriteLine("The card must be in hand");
            return;
        }

        if (PayloadCard != null)
        {
            if (NoCardOnBoard() || IsBetterAsSameSuit(PayloadCard) || IsBetterBecouseOfMandatory(PayloadCard))
            {
                bestCardOnTable = PayloadCard;
            }

            await hubConnection.SendAsync(ClientToServer.PLAY_CARD, PayloadCard, bestCardOnTable);
            Console.WriteLine("Card should be played");
            PayloadCard = null;
        }
    }

    public async Task GiveCard(string playerWhoGetName)
    {
        if (phase != Phase.GivingAdditionalCards)
        {
            Console.WriteLine("Wrong phase");
            return;
        }
        if (PayloadCard.Status != Status.InHand)
        {
            Console.WriteLine("The card must be in hand");
            return;
        }
        if (!AmIActive())
        {
            Console.WriteLine("Not your turn");
            return;
        }

        if (PayloadCard != null)
        {
            await hubConnection.SendAsync(ClientToServer.GIVE_CARD_TO_PLAYER, PayloadCard, playerWhoGetName);
            Console.WriteLine("Card should be given");
            PayloadCard = null;
        }
    }

    public async Task CheckBoxClick()
    {
        IsReady = !IsReady;
        Console.WriteLine($"ready: {IsReady}");
        checkBoxDisabled = true;
        StateHasChanged();

        await hubConnection.SendAsync(ClientToServer.USER_READY_CHANGE);

        var Timer = new System.Timers.Timer();
        Timer.AutoReset = false;
        Timer.Interval = checkBoxDelayMiliSeconds;

        Timer.Elapsed += OnTimerEnd;
        Timer.Enabled = true;
    }

    private void OnTimerEnd(Object o, System.Timers.ElapsedEventArgs e)
    {
        checkBoxDisabled = false;
        StateHasChanged();
    }

    public bool AmIActive()
    {
        if (Users[activePlayerIndex].Name == UserName)
        {
            return true;
        }

        return false;
    }

    public bool CanPlayThisCard()
    {
        if (PayloadCard.Status != Status.InHand)
            return false;

        if(NoCardOnBoard())
            return true;

        if (IsBetterAsSameSuit(PayloadCard))
            return true;

        if (!CanPlayBetterAsSameSuit() && IsSameSuit(PayloadCard))
            return true;

        if (!CanPlaySameSuit() && IsBetterBecouseOfMandatory(PayloadCard))
            return true;

        if (!CanPlayBetterAsSameSuit() && !CanPlayBetterBecouseOfMandatory() && IsMandatorySuit(PayloadCard))
            return true;

        if(!CanPlaySameSuit() && !CanPlayMandatorySuit())
            return true;

        return false;
    }

    public bool CanPlayMandatorySuit()
    {
        if (mandatorySuit == Suit.None)
            return false;

        foreach (var checkedCard in playerCards)
        {
            if (checkedCard.Suit == mandatorySuit)
                return true;
        }
        return false;
    }

    public bool NoCardOnBoard()
    {
        if(bestCardOnTable == null)
        {
            return true;
        }
        return false;
    }

    public bool CanPlaySameSuit()
    {
        foreach (var checkedCard in playerCards)
        {
            if (checkedCard.Suit == bestCardOnTable.Suit)
            {
                return true;
            }
        }
        return false;
    }

    public bool IsBetterAsSameSuit(CardModel newCard)
    {
        if (bestCardOnTable.Suit == newCard.Suit && bestCardOnTable.Rank < newCard.Rank)
        {
            return true;
        }
        return false;
    }

    public bool IsSameSuit(CardModel newCard)
    {
        if (bestCardOnTable.Suit == newCard.Suit)
        {
            return true;
        }
        return false;
    }

    public bool CanPlayBetterAsSameSuit()
    {
        foreach (var card in playerCards)
        {
            if (IsBetterAsSameSuit(card))
            {
                return true;
            }
        }
        return false;
    }

    public bool IsBetterBecouseOfMandatory(CardModel newCard)
    {
        if (bestCardOnTable.Suit != mandatorySuit && newCard.Suit == mandatorySuit)
        {
            return true;
        }
        return false;
    }

    public bool IsMandatorySuit(CardModel newCard)
    {
        if (mandatorySuit == newCard.Suit)
        {
            return true;
        }
        return false;
    }

    public bool CanPlayBetterBecouseOfMandatory()
    {
        foreach (var card in playerCards)
        {
            if (IsBetterBecouseOfMandatory(card))
                return true;
        }
        return false;
    }

    public string getWinnerName() => Users.SingleOrDefault(x => x.Points >= 1000).Name;

    async Task LeaveRoom() => await hubConnection.SendAsync(ClientToServer.LEAVE_ROOM);
}