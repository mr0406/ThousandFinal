<CascadingValue Value="this">
    <div style="border: dotted; min-height: 90vh; width: inherit;
                    justify-content: center; display: flex; align-items: center">
        @if (!GameStarted)
        {
            <p>Are you ready? </p>
            <input type="checkbox" @value="@User.IsReady" @onchange="() => CheckBoxClick()" disabled="@checkBoxDisabled" />

            <button @onclick="TryStartGame">Start</button>
        }
        else
        {
            <div id="mandatory" style="border: dotted; width: 20%; height: 100px; display: block; position: absolute;
                                    margin-left: -200px;  top: 10px">
                <div>Name:@User.Name</div>
                <MandatoryTable currentMandatory="mandatorySuit"></MandatoryTable>
            </div>
            <div id="resultTable" style="border: dotted; width: 30%; height: 100px; display: block; position: absolute;
                                    margin-left: 600px; top: 10px">
  
                <ResultsTable Players="@Users"></ResultsTable>
            </div>

            <div style="color: green">
                @if (AmIActive())
                {
                    <p>I AM ACTIVE</p>
                }
            </div>

            <div style="border: solid; width: 55%; height: 250px">
                <div style="border: dotted; width: 10%; height: 200px; margin-left: 10px; display: inline-block; position: relative">
                    <OtherPlayerHand UserName="@leftUserName" numberOfCards="leftUserNumberOfCards"></OtherPlayerHand>
                </div>

                <div style="border: dotted; width: 40%; height: 200px; display: inline-block; position: relative; margin-left: 200px; margin-bottom: 10px">
                    <CardsOnTable Cards="cardsOnTable"></CardsOnTable>
                </div>

                <div style="border: dotted; width: 10%; height: 200px; margin-left: 200px; display: inline-block; position: relative">
                    <OtherPlayerHand UserName="@rightUserName" numberOfCards="rightUserNumberOfCards"></OtherPlayerHand>
                </div>
            </div>

            @if (AmIActive() && phase == Phase.Auction)
            {
                <div>
                    <button @onclick="GiveUpAuction">GiveUpAuction</button>
                </div>
            }
            @if (AmIActive() && phase == Phase.RaisingPointsToAchieve)
            {
                <div>
                    <button @onclick="DontRaisePointsToAchieve">DontRaisePointsToAchieve</button>
                </div>
            }

            <div style="border: dotted; width: 70%; height: 200px; position: absolute; right:25%; left: 50%; bottom : 10px; margin-left: -35%">
                <PlayersHand Cards="myCards"></PlayersHand>
            </div>
        }
    </div>
</CascadingValue>

@code {
    [CascadingParameter] public HubConnection hubConnection { get; set; }

    [Parameter] public UserModel User { get; set; }
    [Parameter] public List<UserModel> Users { get; set; }

    public string leftUserName;
    public int leftUserNumberOfCards;
    public string rightUserName;
    public int rightUserNumberOfCards;

    private List<CardModel> myCards = new List<CardModel>();
    private List<CardModel> cardsOnTable = new List<CardModel>();
    private bool thereAreCardsToTake; //FIX
    private List<CardModel> cardsToTake = new List<CardModel>(); //FIX

    private int activePlayerIndex;

    private Suit mandatorySuit;

    public bool GameStarted = false;

    public CardModel PayloadCard { get; set; }

    public bool checkBoxDisabled { get; set; } = false;

    public Phase phase { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection.On<string, string>(ServerToClient.RECEIVE_GAME_STARTED, (LeftUserName, RigtUserName) =>
        {
            leftUserName = LeftUserName;
            rightUserName = RigtUserName;

            GameStarted = true;
            StateHasChanged();
        });

        hubConnection.On<List<UserModel>>(ServerToClient.RECEIVE_REFRESH_PLAYERS, (players) =>
        {
            Users = players;
            StateHasChanged();
        });

        hubConnection.On<List<CardModel>, List<CardModel>>(ServerToClient.RECEIVE_REFRESH_BOARD, (handCards, tableCards) =>
        {
            myCards = handCards;
            cardsOnTable = tableCards;
            StateHasChanged();
        });

        hubConnection.On<bool, List<CardModel>>(ServerToClient.RECEIVE_REFRESH_CARDS_TO_TAKE , (cardsToTakeExists, newCardsToTake) =>
        {
            //1. Where cardsToTake exists and cards are null <- there are unknown, show 3 reverses
            //2. Where cardsToTake exists and cards arent null <- there are known, show 3 cards
            //3. Where cardsToTake dont exists <- dont show anything

            thereAreCardsToTake = cardsToTakeExists;
            cardsToTake = newCardsToTake;
        });


        hubConnection.On<Dictionary<string, int>>(ServerToClient.RECEIVE_REFRESH_PLAYERS_CARDS_NUMBER, (dictionary) =>
        {
            dictionary.TryGetValue(leftUserName, out leftUserNumberOfCards);
            dictionary.TryGetValue(rightUserName, out rightUserNumberOfCards);
            StateHasChanged();
        });

        hubConnection.On<Suit>(ServerToClient.RECEIVE_REFRESH_MANDATORY, (newMandatory) =>
        {
            mandatorySuit = newMandatory;
            StateHasChanged();
        });


        hubConnection.On<RefreshPackage>(ServerToClient.RECEIVE_REFRESH, (package) =>
        {
            WritePackageInfo(package);

            Users = package.players;
            myCards = package.userCards;
            leftUserName = package.leftPlayerName;
            leftUserNumberOfCards = package.leftPlayerCardsNumber;
            rightUserName = package.rightPlayerName;
            rightUserNumberOfCards = package.rightPlayerCardsNumber;
            cardsOnTable = package.cardsOnTable;
            mandatorySuit = package.currentMandatory;
            thereAreCardsToTake = package.cardsToTakeExists;
            cardsToTake = package.cardsToTake;
            activePlayerIndex = package.indexOfActivePlayer;
            phase = package.phase;
            StateHasChanged();
        });


    }

    void TryStartGame() => hubConnection.SendAsync(ClientToServer.TRY_START_GAME);
    void GiveUpAuction()
    {
        hubConnection.SendAsync(ClientToServer.GIVE_UP_AUCTION);
    }

    void DontRaisePointsToAchieve()
    {
        hubConnection.SendAsync(ClientToServer.DONT_RAISE_POINTS_TO_ACHIEVE);
    }

    public async Task PlayCard()
    {
        //Client side validation
        if(phase != Phase.Playing)
        {
            Console.WriteLine("Wrong phase");
            return;
        }
        if (PayloadCard.Status != Status.InHand)
        {
            Console.WriteLine("The card must be in hand");
            return;
        }
        if(!AmIActive())
        {
            Console.WriteLine("Not your turn");
            return;
        }

        if(PayloadCard != null)
        {
            await hubConnection.SendAsync(ClientToServer.PLAY_CARD, PayloadCard);
            Console.WriteLine("Card should be played");
            PayloadCard = null;
        }
    }

    public async Task GiveCard(string playerWhoGetName)
    {
        //Client side validation
        if(phase != Phase.GivingAdditionalCards)
        {
            Console.WriteLine("Wrong phase");
            return;
        }
        if (PayloadCard.Status != Status.InHand)
        {
            Console.WriteLine("The card must be in hand");
            return;
        }
        if(!AmIActive())
        {
            Console.WriteLine("Not your turn");
            return;
        }

        if(PayloadCard != null)
        {
            await hubConnection.SendAsync(ClientToServer.GIVE_CARD_TO_PLAYER, PayloadCard, playerWhoGetName);
            Console.WriteLine("Card should be given");
            PayloadCard = null;
        }
    }

    public async Task CheckBoxClick()
    {
        //checkBoxDisabled = true;
        await hubConnection.SendAsync(ClientToServer.USER_READY_CHANGE);
        //System.Threading.Thread.Sleep(3000);
        //checkBoxDisabled = false;
    }

    public void WritePackageInfo(RefreshPackage package)
    {
        Console.WriteLine("PACKAGE");

        foreach (var card in package.cardsOnTable)
        {
            Console.WriteLine($"{card.Rank}, {card.Suit}");
        }
        Console.WriteLine("--------------------");
    }

    public bool AmIActive()
    {
        if (Users[activePlayerIndex].Name == User.Name)
            return true;

        return false;
    }
}
