<CascadingValue Value="this">
    <div id="gameContainer">

        @if (!GameStarted)
        {
            <p>Are you ready? </p>
            <input type="checkbox" @value="@User.IsReady" @onchange="() => CheckBoxClick()" disabled="@checkBoxDisabled" />

            <button @onclick="TryStartGame">Start</button>
        }
        else
        {
            <div id="mandatory">

                <div>Name:@User.Name</div>
                <MandatoryTable currentMandatory="mandatorySuit"></MandatoryTable>

            </div>
            <div id="resultTable">
  
                <ResultsTable Players="@Users"></ResultsTable>
            </div>

            <div style="color: green">
                @if (AmIActive())
                {
                    <p>I AM ACTIVE</p>
                }
            </div>

            <div id="tableContainer">

                <div class="otherPlayer" id="leftPlayer">
                    <OtherPlayerHand UserName="@leftUserName" numberOfCards="leftUserNumberOfCards"></OtherPlayerHand>
                </div>

                @if (phase == Phase.Auction)
                {
                    if (AmIActive())
                    {
                        <AuctionBoard lastHighest="highestBet"></AuctionBoard>
                    }
                }

                @if (phase == Phase.GivingAdditionalCards)
                {

                }

                @if (phase == Phase.RaisingPointsToAchieve)
                {
                    if (AmIActive())
                    {
                        <RaisingPointsBoard playerBet="highestBet"></RaisingPointsBoard>
                    }
                }


                @if (phase == Phase.Playing)
                {
                    <div id="table">
                        <CardsOnTable Cards="cardsOnTable"></CardsOnTable>
                    </div>
                }

                <div class="otherPlayer" id="rightPlayer">
                    <OtherPlayerHand UserName="@rightUserName" numberOfCards="rightUserNumberOfCards"></OtherPlayerHand>
                </div>
            </div>

            <div id="playerCards">
                <PlayersHand Cards="playerCards"></PlayersHand>
            </div>
        }
    </div>
</CascadingValue>

@code {
    [CascadingParameter] public HubConnection hubConnection { get; set; }

    [Parameter] public UserModel User { get; set; }
    [Parameter] public List<UserModel> Users { get; set; }

    public string leftUserName;
    public int leftUserNumberOfCards;
    public string rightUserName;
    public int rightUserNumberOfCards;

    public List<CardModel> playerCards = new List<CardModel>();
    public List<CardModel> cardsOnTable = new List<CardModel>();
    public bool thereAreCardsToTake; //FIX
    public List<CardModel> cardsToTake = new List<CardModel>(); //FIX

    public int activePlayerIndex;

    public Suit mandatorySuit;

    public bool GameStarted = false;

    public CardModel PayloadCard { get; set; }

    public bool checkBoxDisabled { get; set; } = false;

    public Phase phase { get; set; }

    public int highestBet { get; set; } = 100;

    public CardModel bestCardOnTable { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        hubConnection.On<string, string>(ServerToClient.RECEIVE_GAME_STARTED, (LeftUserName, RigtUserName) =>
        {
            leftUserName = LeftUserName;
            rightUserName = RigtUserName;

            GameStarted = true;
            StateHasChanged();
        });

        hubConnection.On<List<UserModel>>(ServerToClient.RECEIVE_REFRESH_PLAYERS, (players) =>
        {
            Users = players;
            StateHasChanged();
        });

        hubConnection.On<List<CardModel>, List<CardModel>>(ServerToClient.RECEIVE_REFRESH_BOARD, (handCards, tableCards) =>
        {
            playerCards = handCards;
            cardsOnTable = tableCards;
            StateHasChanged();
        });

        hubConnection.On<bool, List<CardModel>>(ServerToClient.RECEIVE_REFRESH_CARDS_TO_TAKE , (cardsToTakeExists, newCardsToTake) =>
        {
            //1. Where cardsToTake exists and cards are null <- there are unknown, show 3 reverses
            //2. Where cardsToTake exists and cards arent null <- there are known, show 3 cards
            //3. Where cardsToTake dont exists <- dont show anything

            thereAreCardsToTake = cardsToTakeExists;
            cardsToTake = newCardsToTake;
        });


        hubConnection.On<Dictionary<string, int>>(ServerToClient.RECEIVE_REFRESH_PLAYERS_CARDS_NUMBER, (dictionary) =>
        {
            dictionary.TryGetValue(leftUserName, out leftUserNumberOfCards);
            dictionary.TryGetValue(rightUserName, out rightUserNumberOfCards);
            StateHasChanged();
        });

        hubConnection.On<Suit>(ServerToClient.RECEIVE_REFRESH_MANDATORY, (newMandatory) =>
        {
            mandatorySuit = newMandatory;
            StateHasChanged();
        });


        hubConnection.On<RefreshPackage>(ServerToClient.RECEIVE_REFRESH, (package) =>
        {
            WritePackageInfo(package);

            Users = package.players;
            playerCards = package.userCards;
            leftUserName = package.leftPlayerName;
            leftUserNumberOfCards = package.leftPlayerCardsNumber;
            rightUserName = package.rightPlayerName;
            rightUserNumberOfCards = package.rightPlayerCardsNumber;
            cardsOnTable = package.cardsOnTable;
            mandatorySuit = package.currentMandatory;
            thereAreCardsToTake = package.cardsToTakeExists;
            cardsToTake = package.cardsToTake;
            activePlayerIndex = package.indexOfActivePlayer;
            phase = package.phase;
            highestBet = package.highestBet;
            bestCardOnTable = package.bestCardOnTable;
            StateHasChanged();
        });


    }

    void TryStartGame() => hubConnection.SendAsync(ClientToServer.TRY_START_GAME);

    public async Task PlayCard()
    {
        //Client side validation
        if (PayloadCard.Status != Status.InHand)
        {
            Console.WriteLine("The card must be in hand");
            return;
        }

        if(PayloadCard != null)
        {
            CardModel newBestCard = GetBetterCard(bestCardOnTable, PayloadCard);
            await hubConnection.SendAsync(ClientToServer.PLAY_CARD, PayloadCard, newBestCard);
            Console.WriteLine("Card should be played");
            PayloadCard = null;
        }
    }

    public async Task GiveCard(string playerWhoGetName)
    {
        //Client side validation
        if(phase != Phase.GivingAdditionalCards)
        {
            Console.WriteLine("Wrong phase");
            return;
        }
        if (PayloadCard.Status != Status.InHand)
        {
            Console.WriteLine("The card must be in hand");
            return;
        }
        if(!AmIActive())
        {
            Console.WriteLine("Not your turn");
            return;
        }

        if(PayloadCard != null)
        {
            await hubConnection.SendAsync(ClientToServer.GIVE_CARD_TO_PLAYER, PayloadCard, playerWhoGetName);
            Console.WriteLine("Card should be given");
            PayloadCard = null;
        }
    }

    public async Task CheckBoxClick()
    {
        //checkBoxDisabled = true;
        await hubConnection.SendAsync(ClientToServer.USER_READY_CHANGE);
        //System.Threading.Thread.Sleep(3000);
        //checkBoxDisabled = false;
    }

    public void WritePackageInfo(RefreshPackage package)
    {
        Console.WriteLine("PACKAGE");

        foreach (var card in package.cardsOnTable)
        {
            Console.WriteLine($"{card.Rank}, {card.Suit}");
        }
        Console.WriteLine("--------------------");
    }

    public bool AmIActive()
    {
        if (Users[activePlayerIndex].Name == User.Name)
            return true;

        return false;
    }


    //NEW

    public bool CanPlayThisCard()
    {
        /* 
        * 1. if you can play new best card                             <- PLAY BETTER CARD
        * 2. if you cant play better card, you can play same suit      <- PLAY SAME SUIT
        * 3. if you cant play better card, you cant play same suit, 
        *      you can play mandatory suit                             <- PLAY MANDATORY SUIT
        * 4. if you cant play new best card, you cant play same suit, 
        * you cant play mandatory suit                                 <- YOU CAN PLAY ANY CARD
        */

        //1
        if (IsNewBestCard(PayloadCard))
        {
            bestCardOnTable = PayloadCard;
            return true;
        }
        //2
        if(!CanPlayNewBestCard() && PayloadCard.Suit == bestCardOnTable.Suit)
            return true;
        //3
        if (!CanPlayNewBestCard() && !CanPlaySameSuit() && PayloadCard.Suit == mandatorySuit)
            return true;
        //4
        if (!CanPlayNewBestCard() && !CanPlaySameSuit() && !CanPlayMandatorySuit())
            return true;

        return false;
    }

    public bool CanPlayMandatorySuit()
    {
        if (mandatorySuit == Suit.None)
            return false;

        foreach (var checkedCard in playerCards)
        {
            if (checkedCard.Suit == mandatorySuit)
                return true;
        }
        return false;
    }

    public bool CanPlaySameSuit()
    {
        if (bestCardOnTable == null)
            return false;

        foreach (var checkedCard in playerCards)
        {
            if (checkedCard.Suit == bestCardOnTable.Suit)
                return true;
        }
        return false;
    }

    public bool CanPlayNewBestCard()
    {
        foreach (var checkedCard in playerCards)
        {
            if (IsNewBestCard(checkedCard))
                return true;
        }
        return false;
    }

    public bool IsNewBestCard(CardModel card)
    {
        if (cardsOnTable.Count() == 0)
            return true;

        CardModel betterCard = GetBetterCard(bestCardOnTable, card);
        if (betterCard.Rank == card.Rank && betterCard.Suit == card.Suit)
            return true;

        return false;
    }

    public CardModel GetBetterCard(CardModel pastBestCard, CardModel pretendendCard)
    {
        if (mandatorySuit != Suit.None && pastBestCard.Suit != mandatorySuit && pretendendCard.Suit == mandatorySuit)
            return pretendendCard;

        else if (pastBestCard.Suit == pretendendCard.Suit && pastBestCard.Rank < pretendendCard.Rank)
            return pretendendCard;

        else
            return pastBestCard;
    }
}
