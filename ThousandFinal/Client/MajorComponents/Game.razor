<CascadingValue Value="this">
    <div id="gameContainer">

        @if (!GameStarted)
        {
            <p>Are you ready? </p>
            <input type="checkbox" @value="@User.IsReady" @onchange="() => CheckBoxClick()" disabled="@checkBoxDisabled" />

            <button @onclick="TryStartGame">Start</button>
        }
        else
        {
            //<div class="row" id="row1">
                <div id="mandatory">

                    <div>Name:@User.Name</div>
                    <MandatoryTable currentMandatory="@mandatorySuit"></MandatoryTable>

                </div>

                <div id="cardsToTake">
                    @if (cardsToTakeExists)
                    {
                        <CardsToTake Cards="@cardsToTake"></CardsToTake>
                    }
                </div>

                <div id="resultTable">

                    <ResultsTable Players="@Users"></ResultsTable>
                </div>
            //</div>

            //<div class="row" id="row2">
                <div style="color: green">
                    @if (AmIActive())
                    {
                        <p>I AM ACTIVE</p>
                    }
                </div>


                <div id="tableContainer">

                    <div class="otherPlayer" id="leftPlayer">
                        <OtherPlayerHand UserName="@leftUserName" numberOfCards="leftUserNumberOfCards"></OtherPlayerHand>
                    </div>

                    @if (phase == Phase.Auction)
                    {
                        if (AmIActive())
                        {
                            <div id="raisingPoints">
                                <AuctionBoard lastHighest="highestBet"></AuctionBoard>
                            </div>
                        }
                    }

                    @if (phase == Phase.PlayerWon)
                    {
                        <h1 style="color: green">Winner: @getWinnerName()</h1>
                    }

                    @if (phase == Phase.GivingAdditionalCards)
                    {

                    }

                    @if (phase == Phase.RaisingPointsToAchieve)
                    {
                        if (AmIActive())
                        {
                            <div id="raisingPoints">
                                <RaisingPointsBoard playerBet="highestBet"></RaisingPointsBoard>
                            </div>
                        }
                    }


                    @if (phase == Phase.Playing)
                    {
                        <div id="table">
                            <CardsOnTable Cards="cardsOnTable"></CardsOnTable>
                        </div>
                    }

                    <div class="otherPlayer" id="rightPlayer">
                        <OtherPlayerHand UserName="@rightUserName" numberOfCards="rightUserNumberOfCards"></OtherPlayerHand>
                    </div>
                </div>
            //</div>

            //<div class="row" id="row3">
                <div id="playerCards">
                    <PlayersHand Cards="playerCards"></PlayersHand>
                </div>
            //</div>
        }
    </div>
</CascadingValue>

@code {
    [CascadingParameter] public HubConnection hubConnection { get; set; }

    [Parameter] public UserModel User { get; set; }
    [Parameter] public List<UserModel> Users { get; set; }

    public string leftUserName;
    public int leftUserNumberOfCards;
    public string rightUserName;
    public int rightUserNumberOfCards;

    public List<CardModel> playerCards = new List<CardModel>();
    public List<CardModel> cardsOnTable = new List<CardModel>();
    public bool cardsToTakeExists { get; set; } = true;
    public List<CardModel> cardsToTake = new List<CardModel>(); //FIX

    public int activePlayerIndex;

    public Suit mandatorySuit;

    public bool GameStarted = false;

    public CardModel PayloadCard { get; set; }

    public bool checkBoxDisabled { get; set; } = false;

    public Phase phase { get; set; }

    public int highestBet { get; set; } = 100;

    public CardModel bestCardOnTable { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        hubConnection.On<string, string>(ServerToClient.RECEIVE_GAME_STARTED, (LeftUserName, RigtUserName) =>
        {
            leftUserName = LeftUserName;
            rightUserName = RigtUserName;

            GameStarted = true;
            StateHasChanged();
        });

        hubConnection.On<List<UserModel>>(ServerToClient.RECEIVE_REFRESH_PLAYERS, (players) =>
        {
            Users = players;
            StateHasChanged();
        });

        hubConnection.On<RefreshPackage>(ServerToClient.RECEIVE_REFRESH, (package) =>
        {
            playerCards = package.playerSpecificInfo.playerCards;
            leftUserName = package.playerSpecificInfo.leftPlayerName;
            leftUserNumberOfCards = package.playerSpecificInfo.leftPlayerCardsNumber;
            rightUserName = package.playerSpecificInfo.rightPlayerName;
            rightUserNumberOfCards = package.playerSpecificInfo.rightPlayerCardsNumber;

            Users = package.gameInfo.players;
            activePlayerIndex = package.gameInfo.indexOfActivePlayer;
            mandatorySuit = package.gameInfo.currentMandatory;
            phase = package.gameInfo.phase;
            highestBet = package.gameInfo.highestBet;

            cardsOnTable = package.cardsInfo.cardsOnTable;
            bestCardOnTable = package.cardsInfo.bestCardOnTable;
            cardsToTakeExists = package.cardsInfo.cardsToTakeExists;
            cardsToTake = package.cardsInfo.cardsToTake;

            StateHasChanged();
        });
    }

    void TryStartGame() => hubConnection.SendAsync(ClientToServer.TRY_START_GAME);

    public async Task PlayCard()
    {
        //Client side validation
        if (PayloadCard.Status != Status.InHand)
        {
            Console.WriteLine("The card must be in hand");
            return;
        }

        if (PayloadCard != null)
        {
            if (NoCardOnBoard() || IsBetterAsSameSuit(PayloadCard) || IsBetterBecouseOfMandatory(PayloadCard))
            {
                bestCardOnTable = PayloadCard;
            }

            await hubConnection.SendAsync(ClientToServer.PLAY_CARD, PayloadCard, bestCardOnTable);
            Console.WriteLine("Card should be played");
            PayloadCard = null;
        }
    }

    public async Task GiveCard(string playerWhoGetName)
    {
        //Client side validation
        if (phase != Phase.GivingAdditionalCards)
        {
            Console.WriteLine("Wrong phase");
            return;
        }
        if (PayloadCard.Status != Status.InHand)
        {
            Console.WriteLine("The card must be in hand");
            return;
        }
        if (!AmIActive())
        {
            Console.WriteLine("Not your turn");
            return;
        }

        if (PayloadCard != null)
        {
            await hubConnection.SendAsync(ClientToServer.GIVE_CARD_TO_PLAYER, PayloadCard, playerWhoGetName);
            Console.WriteLine("Card should be given");
            PayloadCard = null;
        }
    }

    public async Task CheckBoxClick()
    {
        //checkBoxDisabled = true;
        await hubConnection.SendAsync(ClientToServer.USER_READY_CHANGE);
        //System.Threading.Thread.Sleep(3000);
        //checkBoxDisabled = false;
    }

    public bool AmIActive()
    {
        if (Users[activePlayerIndex].Name == User.Name)
            return true;

        return false;
    }

    public bool CanPlayThisCard()
    {
        if (PayloadCard.Status != Status.InHand)
        {
            Console.WriteLine("Not in hand");
            return false;
        }

        Console.WriteLine("******************");
        if(bestCardOnTable != null)
        {
            Console.WriteLine($"Best card on the table {bestCardOnTable.Rank}, {bestCardOnTable.Suit}");
        }
        Console.WriteLine("******************");

        if(NoCardOnBoard())
        {
            Console.WriteLine("no best card on board");
            return true;
        }

        if (IsBetterAsSameSuit(PayloadCard))
        {
            Console.WriteLine("new best as same suit");
            return true;
        }

        if (!CanPlayBetterAsSameSuit() && IsSameSuit(PayloadCard))
        {
            Console.WriteLine("same suit");
            return true;
        }

        if (!CanPlaySameSuit() && IsBetterBecouseOfMandatory(PayloadCard))
        {
            Console.WriteLine("new best becouse of mandatory");
            return true;
        }
        if (!CanPlayBetterAsSameSuit() && !CanPlayBetterBecouseOfMandatory() && IsMandatorySuit(PayloadCard))
        {
            Console.WriteLine("same suit as mandatory");
            return true;
        }

        if(!CanPlaySameSuit() && !CanPlayMandatorySuit())
        {
            Console.WriteLine("any card played");
            return true;
        }

        return false;
    }

    public bool CanPlayMandatorySuit()
    {
        if (mandatorySuit == Suit.None)
        {
            return false;
        }

        foreach (var checkedCard in playerCards)
        {
            if (checkedCard.Suit == mandatorySuit)
            {
                return true;
            }
        }
        return false;
    }

    public bool NoCardOnBoard()
    {
        if(bestCardOnTable == null)
        {
            return true;
        }
        return false;
    }

    public bool CanPlaySameSuit()
    {
        foreach (var checkedCard in playerCards)
        {
            if (checkedCard.Suit == bestCardOnTable.Suit)
            {
                return true;
            }
        }
        return false;
    }

    public bool IsBetterAsSameSuit(CardModel newCard)
    {
        if (bestCardOnTable.Suit == newCard.Suit && bestCardOnTable.Rank < newCard.Rank)
        {
            Console.WriteLine($"{newCard.Rank}, {newCard.Suit} is better than {bestCardOnTable.Rank}, {bestCardOnTable.Suit}");
            return true;
        }
        return false;
    }

    public bool IsSameSuit(CardModel newCard)
    {
        if (bestCardOnTable.Suit == newCard.Suit)
        {
            return true;
        }
        return false;
    }

    public bool CanPlayBetterAsSameSuit()
    {
        foreach (var card in playerCards)
        {
            if (IsBetterAsSameSuit(card))
            {
                Console.WriteLine($"CAN PLAY FUCKING BETTER CARD");
                return true;
            }
        }
        return false;
    }

    public bool IsBetterBecouseOfMandatory(CardModel newCard)
    {
        if (bestCardOnTable.Suit != mandatorySuit && newCard.Suit == mandatorySuit)
        {
            Console.WriteLine($"{newCard.Rank}, {newCard.Suit} is better than {bestCardOnTable.Rank}, {bestCardOnTable.Suit}");
            return true;
        }
        return false;
    }

    public bool IsMandatorySuit(CardModel newCard)
    {
        if (mandatorySuit == newCard.Suit)
        {
            Console.WriteLine($"{newCard.Rank}, {newCard.Suit} is mandatorySuit: {mandatorySuit}");
            return true;
        }
        return false;
    }

    public bool CanPlayBetterBecouseOfMandatory()
    {
        foreach (var card in playerCards)
        {
            if (IsBetterBecouseOfMandatory(card))
            {
                return true;
            }
        }
        return false;
    }

    public string getWinnerName() => Users.SingleOrDefault(x => x.Points >= 1000).Name;
}