<div style="border: dotted;">
    <hr />
    <div>Users: </div>
    <ul id="usersList">
        @foreach (var user in Users)
        {
            <li>@user.Name</li>
        }
    </ul>

    <hr />

    <div>Messages: </div>

    <div style="height: 300px; min-width: 10vw; max-width: 30vw; border: 1px dashed gray;" class="overflow-auto">
        @foreach (var message in messages)
        {
            if (message.GeneratedFromServer)
            {
                <div style="background-color: gray; max-width: 100%">@message.Text</div>
            }
            else if (message.AuthorName == User.Name)
            {
                <div style="text-align: right; max-width: 30vw">@message.Text</div>
            }
            else
            {
                <div>@message.AuthorName: @message.Text</div>
            }
        }
    </div>

    <hr />

    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" style="max-width: 25vw;"/>
        </label>
    </div>
    <button @onclick="Send">Send</button>

</div>

@code {
    [CascadingParameter] public HubConnection hubConnection { get; set; }

    [Parameter] public UserModel User { get; set; }
    [Parameter] public List<UserModel> Users { get; set; }

    public List<MessageModel> messages = new List<MessageModel>();
    public string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection.On<MessageModel>(ServerToClient.RECEIVE_MESSAGE, (MessageModel message) =>
        {
            messages.Add(message);
            StateHasChanged();
        });
    }

    async Task Send()
    {
        if(!String.IsNullOrWhiteSpace(messageInput))
        {
            MessageModel message = new MessageModel(messageInput, User);
            await hubConnection.SendAsync(ClientToServer.SEND_MESSAGE, message);
            messageInput = "";
        }
    }

}