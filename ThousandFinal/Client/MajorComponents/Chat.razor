<div id="chatContainer">
    <hr />
    <span class="playerList" id="usersHeader">Users: </span>

    <ul class="playerList">
        @foreach (var user in Users)
        {
            <li class="playerList">@user.Name</li>
        }
    </ul>

    <hr />

    <div id="messages">Messages: </div>

    <div  id="messages"> <! –– class="overflow-auto" ––>
        @foreach (var message in messages)
        {
            if (message.GeneratedFromServer)
            {
                <div  class="message" id="serverMessage">@message.Text</div>
            }
            else if (message.AuthorName == User.Name)
            {
                <div class="message" id="myMessage" >@message.Text</div>
            }
            else
            {
                <div class="message" id="othersMessage" >@message.AuthorName: @message.Text</div>
            }
        }
    </div>

    <hr />

    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" style="max-width: 25vw;" @onkeyup="@KeyPress"/>
        </label>
    </div>
    <button @onclick="Send">Send</button>

</div>

@code {
    [CascadingParameter] public HubConnection hubConnection { get; set; }

    [Parameter] public UserModel User { get; set; }
    [Parameter] public List<UserModel> Users { get; set; }

    public List<MessageModel> messages = new List<MessageModel>();
    public string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection.On<MessageModel>(ServerToClient.RECEIVE_MESSAGE, (MessageModel message) =>
        {
            messages.Add(message);
            StateHasChanged();
        });
    }

    async Task Send()
    {
        if(!String.IsNullOrWhiteSpace(messageInput))
        {
            await hubConnection.SendAsync(ClientToServer.SEND_MESSAGE, new MessageModel(messageInput, User));
            messageInput = "";
        }
    }

    async Task KeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await Send();
    }

}