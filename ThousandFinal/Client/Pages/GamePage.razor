@page "/test"

@inject NavigationManager  NavigationManager
@using System.Text.Json;

<div style="border: dotted">
    <div>Name: @userName</div>

    @if (!joined)
    {
        <div class="form-group">
            <label>
                User:
                <input @bind="userName" />
            </label>
        </div>
        <button @onclick="Join" disabled="@(!IsConnected)">Join</button>
    }
    else
    {

        <div class="row">
            <div class="col-9">
                <div style="border: dotted; min-height: 90vh; width: inherit;
                    justify-content: center; display: flex; align-items: center">
                    @if (!GameStarted)
                    {
                        <button @onclick="StartGame">Start</button>
                    }
                    else
                    {
                        if (myCards.Count == 0)
                        {
                            <button @onclick="DealCards">DealCards</button>
                        }
                        else
                        {
                            <div style="border: dotted; width: 40%; height: 200px;">

                            </div>

                            <div style="border: dotted; width: 70%; height: 200px; position: absolute; right:25%; left: 50%; bottom : 10px; margin-left: -35%">
                                @foreach (var card in myCards)
                                {
                                    <div style="margin: 2px; border: dashed">@card.Rank, @card.Suit, @card.OwnerName</div>
                                }
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="col-3">
                <div style="border: dotted">
                    <hr />
                    <div>Users: </div>
                    <ul id="usersList">
                        @foreach (var user in users)
                        {
                            <li>@user</li>
                        }
                    </ul>

                    <hr />

                    <div>Messages: </div>

                    <div style="height: 300px; width: 300px; border: 1px dashed gray;" class="overflow-auto">
                        @foreach (var message in messages)
                        {
                            <div>@message</div>
                        }
                    </div>

                    <hr />

                    <div class="form-group">
                        <label>
                            Message:
                            <input @bind="messageInput" size="40" />
                        </label>
                    </div>
                    <button @onclick="Send">Send</button>

                </div>
            </div>
        </div>
    }

</div>

@code {
    public HubConnection hubConnection;
    public List<string> messages = new List<string>();
    public List<string> users = new List<string>();
    public string userName;
    public bool joined = false;
    public string messageInput;

    private List<CardModel> myCards = new List<CardModel>();
    public bool GameStarted = false;

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/apphub"))
            .Build();

        hubConnection.On<string>(ServerToClient.JOIN_SERVER, (username) =>
        {
            users.Add(username);
            StateHasChanged();
        });

        hubConnection.On<string, string>(ServerToClient.SEND_MESSAGE, (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<List<string>>(ServerToClient.GET_USERS, (userNames) =>
        {
            users = userNames;
            StateHasChanged();
        });

        hubConnection.On<List<CardModel>>(ServerToClient.DEAL_CARDS, (cards) =>
        {
            Console.WriteLine("tuta11");

            myCards = new List<CardModel>();

            foreach (var card in cards)
            {
                myCards.Add(card);

            }

            StateHasChanged();
        });

        hubConnection.On(ServerToClient.START_GAME, () =>
        {
            GameStarted = true;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync(ClientToServer.GET_USERS);
    }



    void Join()
    {
        if (users.Count < 3)
        {
            hubConnection.SendAsync(ClientToServer.JOIN_SERVER, userName);
            joined = true;
        }
    }

    async Task Send()
    {
        await hubConnection.SendAsync(ClientToServer.SEND_MESSAGE, userName, messageInput);
    }

    void StartGame()
    {
        if (users.Count == 3)
        {
            hubConnection.SendAsync(ClientToServer.START_GAME);
        }
    }

    void DealCards()
    {
        Console.WriteLine("Client: DealCards");
        hubConnection.SendAsync(ClientToServer.DEAL_CARDS);
    }
}
