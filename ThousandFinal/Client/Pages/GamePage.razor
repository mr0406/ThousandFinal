@page "/"

@inject NavigationManager  NavigationManager

<<<<<<< HEAD
<div style="border: dotted">
    <div>Name: @userName</div>

    @if (!joined)
    {
        <div class="form-group">
            <label>
                User:
                <input @bind="userName" />
            </label>
        </div>
        <button @onclick="Join" disabled="@(!IsConnected)">Join</button>
    }
    else
    {
        <div class="row">
            <div class="col-9">
                <div style="border: dotted; min-height: 90vh; width: inherit;
                    justify-content: center; display: flex; align-items: center">
                    @if (!GameStarted)
                    {
                        <button @onclick="StartGame">Start</button>
                    }
                    else
                    {
                        if (myCards.Count == 0)
                        {
                            <button @onclick="DealCards">DealCards</button>
                        }
                        else
                        {
                            <div id="resultTable" style="border: dotted; width: 20%; height: 100px; display: block; position: absolute;
                                    margin-left: auto; margin-right: auto; top: 10px">
                                @foreach (var user in users)
                                {
                                    <div>@user.Name : @user.Points pkt</div>
                                }
                            </div>

                            <div style="border: solid; width: 95%; height: 250px">
                                <div style="border: dotted; width: 10%; height: 200px; margin-left: 10px; display: inline-block; position: relative">
                                    <p>@leftUser.Name</p>
                                </div>

                                <div style="border: dotted; width: 40%; height: 200px; display: inline-block; position: relative; margin-left: 200px; margin-bottom: 10px">

                                </div>

                                <div style="border: dotted; width: 10%; height: 200px; margin-left: 200px; display: inline-block; position: relative">
                                    <p>@rightUser.Name</p>
                                </div>
                            </div>

                            <div style="border: dotted; width: 70%; height: 200px; position: absolute; right:25%; left: 50%; bottom : 10px; margin-left: -35%">
                                @foreach (var card in myCards)
                                {
                                    <div style="margin: 2px; border: dashed">@card.Rank, @card.Suit, @card.OwnerName</div>
                                }
                            </div>
                        }
                    }
=======
<CascadingValue Value="this.hubConnection">
    <div style="border: dotted">
        @if (!joined)
        {
            <LoginComponent></LoginComponent>
        }
        else
        {
            <div class="row">
                <div class="col-9">
                    <GameComponent @ref="GameComponent" User="User" Users="Users"></GameComponent>
>>>>>>> 0faafbf797fc4633ce8284534b69e6bbb70da2ea
                </div>
                <div class="col-3">
                    <ChatComponent User="User" Users="Users"></ChatComponent>
                </div>
            </div>
        }
    </div>
</CascadingValue>


@code {
    GameComponent GameComponent;

    public HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public bool joined = false;

    public List<UserModel> Users = new List<UserModel>();
    public UserModel User;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/apphub"))
            .Build();

        hubConnection.On<List<UserModel>>(ServerToClient.RECEIVE_USERS, (List<UserModel> users) =>
        {
            this.Users = users;
            StateHasChanged();
        });

        hubConnection.On(ServerToClient.RECEIVE_JOIN, (UserModel user) =>
        {
            joined = true;
            User = user;
            StateHasChanged();
            hubConnection.SendAsync(ClientToServer.GET_USERS);
        });

        hubConnection.On(ServerToClient.RECEIVE_OTHER_USER_JOIN, (UserModel user) =>
        {
            Users.Add(user);
            StateHasChanged();
        });

        hubConnection.On<UserModel>(ServerToClient.RECEIVE_OTHER_USER_LEAVE, (user) =>
        {
            hubConnection.SendAsync(ClientToServer.GET_USERS);
        //var encodedMsg = $"{user.Name} left server.";
        //messages.Add(encodedMsg);
        StateHasChanged();
        });


        await hubConnection.StartAsync();
    }
}
