@page "/"
@using Blazored.Toast.Configuration
@using ThousandFinal.Shared.Models
@inject NavigationManager  NavigationManager
@inject IToastService toastService

<CascadingValue Value="this.hubConnection">
    <div id="gameFrame">
        @if (!joined)
        {
            <WaitingRoom></WaitingRoom>
        }
        else
        {
            <Game UserName="@UserName" Users="Users"></Game>
            <ResultsAndChat UserName="@UserName" Users="Users"></ResultsAndChat>
        }
    </div>
</CascadingValue>

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="10"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

@code {
    public HubConnection hubConnection;

    public bool joined = false;

    public List<UserModel> Users = new List<UserModel>();
    public string UserName;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/apphub"))
            .Build();


        hubConnection.On(ServerToClient.RECEIVE_LEAVE_ROOM, () =>
        {
            joined = false;
            UserName = null;

            Users = new List<UserModel>();
            StateHasChanged();
        });

        hubConnection.On<List<UserModel>>(ServerToClient.RECEIVE_USERS, (List<UserModel> users) =>
        {
            this.Users = users;
            StateHasChanged();
        });

        hubConnection.On<string>(ServerToClient.RECEIVE_JOIN_ROOM, (string UserName) =>
        {
            joined = true;
            this.UserName = UserName;

            StateHasChanged();
        });

        hubConnection.On<Alerts.AlertType, string>(ServerToClient.RECEIVE_ALERT, (Alerts.AlertType alertType, string text) =>
        {
            switch(alertType)
            {
                case Alerts.AlertType.Info:
                {
                    toastService.ShowInfo(text);
                    break;
                }
                case Alerts.AlertType.Error:
                {
                    toastService.ShowError(text);
                    break;
                }
                case Alerts.AlertType.Warning:
                {
                    toastService.ShowWarning(text);
                    break;
                }
                case Alerts.AlertType.Success:
                {
                    toastService.ShowSuccess(text);
                    break;
                }
            }
        });

        await hubConnection.StartAsync();
    }
}
