<div id="cardContainer" draggable="@IsDraggable()" @ondragstart="@(() => HandleDragStart(CardModel))">

    <div class="cardColorContainer">

        <div class="cardColorText" style="color: @cardTextColor()">@GetSymbol(CardModel)</div>

            <img src=@getImgLink(CardModel)  draggable= "false" class="smallCardColorImage" />

        </div>

        <img src=@getImgLink(CardModel) draggable= "false" class="bigCardColorImage" />

        <div class="cardColorContainer" style="align-self: flex-end">

            <img src=@getImgLink(CardModel) draggable= "false" class="smallCardColorImage" style="transform: rotate(180deg);"/>

        <div class="cardColorText" style="transform: rotate(180deg); color: @cardTextColor()">@GetSymbol(CardModel)</div>

    </div>
</div>

@code {
    [CascadingParameter] Game Game { get; set; }
    [Parameter] public CardModel CardModel { get; set; }

    private string IsDraggable()
    {
        if(CardModel.Status == Status.InHand)
        {
            return "true";
        }
        return "false";
    }

    private string getImgLink(CardModel CardModel)
    {
        return "/images/" + CardModel.Suit.ToString().ToLower() + ".ico";
    }

    private string cardTextColor()
    {
        if (CardModel.Suit == Suit.Clubs || CardModel.Suit == Suit.Spades)
            return "#000000";
        else
            return "#D42929";
    }

    private void HandleDragStart(CardModel draggedCard)
    {
        Game.PayloadCard = draggedCard;
    }

    private string GetSymbol(CardModel card)
    {
        switch(card.Rank)
        {
            case Rank.Ace: return "A";
            case Rank.Ten: return "10";
            case Rank.King: return "K";
            case Rank.Queen: return "Q";
            case Rank.Jack: return "J";
            case Rank.Nine: return "9";
            default: return "ERROR";
        }
    }
}
