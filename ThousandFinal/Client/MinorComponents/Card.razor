<div id="cardContainer" draggable="true" @ondragstart="@(() => HandleDragStart(CardModel))">

    <div class="cardColorContainer">

        <div class="cardColorText" style="color: @cardTextColor()">@CardModel.Rank</div>

            <img src=@getImgLink(CardModel)  draggable= "false" class="smallCardColorImage" />

        </div>

        <img src=@getImgLink(CardModel) draggable= "false" class="bigCardColorImage" />

        <div class="cardColorContainer" style="align-self: flex-end">

            <img src=@getImgLink(CardModel) draggable= "false" class="smallCardColorImage" style="transform: rotate(180deg);"/>

        <div class="cardColorText" style="transform: rotate(180deg); color: @cardTextColor()">@CardModel.Rank</div>

    </div>
</div>

@code {
    [CascadingParameter] Game Game { get; set; }
    [Parameter] public CardModel CardModel { get; set; }


    public bool exposed { get; set; } = true;

    private string getImgLink(CardModel CardModel)
    {
        return "/images/" + CardModel.Suit.ToString().ToLower() + ".ico";
    }

    private string cardTextColor()
    {
        if (CardModel.Suit == Suit.Clubs || CardModel.Suit == Suit.Spades)
            return "#000000";
        else
            return "#D42929";
    }

    private void HandleDragStart(CardModel draggedCard)
    {
        Console.WriteLine("DragStart");
        Game.PayloadCard = draggedCard;
    }
}
