<div ondragover="event.preventDefault();"
     ondragstart="event.dataTransfer.setData('', event.target.id);"
     @ondrop="@HandleDrop" @ondragenter="@HandleEnter" @ondragleave="@HandleLeave" class="@dropClass" style="width: 100%; height: 100%; position: absolute; z-index: 10;"></div>

<div class="cardsOnTable">

    @if (Cards != null)
    {
        @foreach (var card in Cards)
        {
            <Card CardModel="card"></Card>
        }
    }
</div>

@code {
    [CascadingParameter] public Game Game { get; set; }
    [Parameter] public List<CardModel> Cards { get; set; }

    string dropClass { get; set; } = "";

    private async Task HandleDrop()
    {
        if(dropClass != "can-drop")
        {
            dropClass = "";
            return;
        }

        dropClass = "";
        await Game.PlayCard();
    }

    private async Task HandleEnter()
    {
        if(Game.phase == Phase.Playing && Game.AmIActive() && CanPlayThisCard())
        {
            dropClass = "can-drop";
            Console.WriteLine("can-drop");
        }
        else
        {
            dropClass = "no-drop";
            Console.WriteLine("no-drop");
        }
    }

    private async Task HandleLeave() => dropClass = "";

    public bool CanPlayThisCard() => Game.CanPlayThisCard();
}
